//FDSA
Number of stairs to be created
Stair length
Stair width
Stair height
Stair pivot point or offset
Step height
Step rotation

// Accept a call and assign values.
proc GenerateStaircase(int $numStair, float $stairLen, float $stairWid, float $stairHei, float $stairOff, float $stepHei, float $stepRotat)
{
    for ($i = 0; $i < $numStair; $i++)
    {
        BuildStair($stairLen, $stairWid, $stairHei);
        SpinStair($i, $stairHei, $stairOff, $stepHei, $stepRotat);
    }
}

// Build the stair block.
proc BuildStair(float $length, float $width, float $height)
{
    polyCube -w $width -h $height -d $length -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;
}

// Move the stair accordingly, with rotation. *Written with help from Microsoft's CoPilot Engine*
proc SpinStair(int $num, float $height, float $offset, float $sHeight, float $rotation)
{
    // Figure out where to move the step.
    float $angle = $num * $rotation;
    float $x = -$offset * cos(deg_to_rad($angle));
    float $z = $offset * sin(deg_to_rad($angle));
    float $y = $num * ($height + $sHeight);

    // Move the step.
    move $x $y $z;
    xform -r;
    rotate 0 ($angle + 90) 0;
}

// Function to convert degrees to radians
global proc float deg_to_rad(float $deg) {
    return $deg * 3.141592653589793 / 180.0;
}