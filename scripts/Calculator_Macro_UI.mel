//Add
global proc float Add(float $list[])
{
    float $start = $list[0];
    for ($i = 1; $i < size($list); $i++)
    {
        $start += $list[$i];
    }
    return $start;
}

//Subtract
global proc float Subtract(float $list[])
{
    float $start = $list[0];
    for ($i = 1; $i < size($list); $i++)
    {
        $start -= $list[$i];
    }
    return $start;
}

//Divide
global proc float Divide(float $list[])
{
    float $start = $list[0];
    for ($i = 1; $i < size($list); $i++)
    {
        $start /= $list[$i];
    }
    return $start;
}

//Multiply
global proc float Multiply(float $list[])
{
    float $start = $list[0];
    for ($i = 1; $i < size($list); $i++)
    {
        $start *= $list[$i];
    }
    return $start;
}

//Power
global proc float Power(float $list[])
{
    float $result = pow ($list[0], $list[1]);
    return $result;
}

//Mean
global proc float Mean(float $list[])
{
    float $start = Add($list);
    $start /= size($list);
    return $start;
}

//Median
global proc float Median(float $list[])
{    
    float $sortedList[] = sort ($list);
    float $result = 0;

    // Find median, whether the size of list is odd or even.
    int $m = size($list);
    int $n = ($m / 2);  // Middle of the array.
    if ($m % 2)
    {
        $result = $sortedList[$n];
    }
    else
    {
        $result = ($sortedList[$n] + $sortedList[($n - 1)]) / 2;
    }

    return $result;
}

//Provide results of called function
global proc string Calculator(float $list[], string $opp)
{
    string $value;
    switch ($opp)
    {
        case "Add":
            $value = Add($list);
            break;
        case "Subtract":
            $value = Subtract($list);
            break;
        case "Divide":
            $value = Divide($list);
            break;
        case "Multiply":
            $value = Multiply($list);
            break;
        case "Power":
            $value = Power($list);
            break;
        case "Mean":
            $value = Mean($list);
            break;
        case "Median":
            $value = Median($list);
            break;
    }
    return $value;
}

//Obtain and convert UI information
global proc GetValues()
{
    //Get values
    string $nums = `optionVar -q "field1"`;
    string $sel = `optionVar -q "option"`;
    string $resultField = `optionVar -q "calcResult"`;

    string $list = `textField -q -text $nums`;
    string $option = `radioCollection -q -select $sel`;

    //tokenize - Courtesy of Microsoft Copilot
    string $tokenList[];
    tokenizeList($list, $tokenList);
    float $floatList[];
    for ($i = 0; $i < size($tokenList); $i++)
        $floatList[$i] = $tokenList[$i];

    //Plug into function
    string $result = Calculator($floatList, $option);
    textField -e -text $result $resultField;
}

//UI for the Calculator
global proc CalcUILator()
{
    //Declare window and erase old window
    string $mWindow = "dsWindow";
    if (`window -exists $mWindow`)
        deleteUI $mWindow;

    //Window Title
    $mWindow = `window -title "Multi-Spread" -wh 425 100 -rtf 1`;
    string $mColumn = `columnLayout -p $mWindow -adj 1`;

    //Array Input Row
    string $rowOne = `rowLayout -ad2 2 -nc 2 -p $mColumn`;
    text -l "List of numbers: " -p $rowOne;
    optionVar -sv "field1" `textField -p $rowOne -pht "1.0, 2.1, 3.14,..."`;

    //Operation Selection Row
    string $rowTwo = `rowLayout -nc 8 -p $mColumn`;
    optionVar -sv "option" `radioCollection -p $rowTwo`;
    string $ob1, $ob2, $ob3, $ob4, $ob5, $ob6, $ob7;
    $ob1 = `radioButton -l "Add" -p $rowTwo "Add"`;
    $ob2 = `radioButton -l "Subtract" -p $rowTwo "Subtract"`;
    $ob3 = `radioButton -l "Divide" -p $rowTwo "Divide"`;
    $ob4 = `radioButton -l "Multiply" -p $rowTwo "Multiply"`;
    $ob5 = `radioButton -l "Power" -p $rowTwo "Power"`;
    $ob6 = `radioButton -l "Mean" -p $rowTwo "Mean"`;
    $ob7 = `radioButton -l "Median" -p $rowTwo "Median"`;
    setParent..; setParent..;

    //Output Row
    string $rowThree = `rowLayout -ad1 1 -p $mColumn`;
    optionVar -sv "calcResult" `textField -p $rowThree -ed 0`;

    //Button
    string $rowFour = `rowLayout -nc 1 -p $mColumn`;
    button -p $mColumn -l "Calculate" -command "GetValues";

    showWindow $mWindow;
}

//Function to run everything:
CalcUILator();