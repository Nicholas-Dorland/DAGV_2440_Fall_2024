//Add
proc Add(float $list[])
{
    float $start = $list[0];
    for ($1 = 1; i < size($list); i++)
    {
        $start += $list[i];
    }
}

//Subtract
proc Subtract(float $list[])
{
    float $start = $list[0];
    for ($1 = 1; i < size($list); i++)
    {
        $start -= $list[i];
    }
}

//Divide
proc Divide(float $list[])
{
    float $start = $list[0];
    for ($1 = 1; i < size($list); i++)
    {
        $start /= $list[i];
    }
}

//Multiply
proc Multiply(float $list[])
{
    float $start = $list[0];
    for ($1 = 1; i < size($list); i++)
    {
        $start *= $list[i];
    }
}

//Power
proc Power(float $list[])
{
    float $result = $list[0] ^ $list[1];
}

//Mean
proc Mean(float $list[])
{
    float $start = Add($list);
    $start /= size($list);
}

//Median
proc Median(float $list[])
{
    // Bubble Sort the Array, provided by CoPilot.
    int $n = size($list);
    for ($i = 0; $i < $n; $i++) {
        for ($j = 0; $j < $n - $i - 1; $j++) {
            if ($list[$j] > $list[$j + 1]) {
                // Swap the numbers
                float $temp = $list[$j];
                $list[$j] = $list[$j + 1];
                $list[$j + 1] = $temp;
            }
        }
    }

    // Find median, whether the size of list is odd or even.
    if ($n % 2)
    {
        float $result = $list[(n / 2) + 1];
    }
    else
    {
        float $result = ($list[n / 2] + $list[(n / 2) + 1]) / 2;
    }
}